r 20 50000
q
r 10 1000
p cacheline 
p cacheline[key] 
p cacheline[key / 2] 
p cacheline[key / 2]  = 10
p key
p size
p line
dashboard -output /dev/pts/7
r
r 10 1000
p cacheline 
p cacheline 
p cacheline 
key / 2
p key / 2
p address
p address - startAddr
p address - startAddr >> 6
p address - startAddr >> 6 / 2
p ((address - startAddr) >> 6) / 2
p ((address - startAddr) >> 6) / 2
p key
p key / 2
p startAddr 
p endAddr  - startAddr 
p (endAddr  - startAddr)
p (endAddr  - startAddr) / 2
p key / 2
q
r 10 1000
r
dashboard -output /dev/pts/7
r
r 10 1000
r 10 1000
dashboard -output /dev/pts/7
r
bt
b yymmap
r
n
c
n
n
n
n
d 1 2
b yymmap if length >= 134217728
r
bt
make
r
d 1 2
r
r 10 100000
bt
q
r 10 100000
bt
r
bt
q
r 10 100000
r 10 100000
r 10 100000
r 10 1000000
bt
r
c
c
q
r 10 100000
q
r 10 100000
bt
r
bt
r 10 10000
bt
p w->rb_color 
p w
q
r 10 10000
bt
r
r
r
bt
l
r
r
r
p w->rb_data 
p w
p rb_node 
p struct rb_node
p rb_node
p w
q
r 1 200000
r 1 2000000
p pointer
r 1 10000000
bt
r
c
bt
c
ls
ls
r 20 80000
bt
b yymunmap
r
n
r
s
n
s
b rb_delete(rb_table*, void const*)
r
d 1
r
p *item
p item
p (ShadowMemory)item
l
n
s
r
r 1 200
d 1 2
r
bt
b rb_delete(rb_table*, void const*)
r
s
p item
p (ShadowMemory)item 
p p->rb_link[1]
p p->rb_link[2
p p->rb_link[2[
p p->rb_link[2]
p p->rb_link[3]
p p->rb_link[4]
p p->rb_link
p p->rb_link[0]
p p->rb_link[2]
p p->rb_link[2]
l
n
p pa
p pa[k-1]
p pa[k-1]->rb_link[da[k - 1]
p pa[k-1]->rb_link[da[k - 1]]
p pa[k-1]->rb_link[da[k - 1]]
n
p p->rb_color 
p RB_BLACK 
n
r
r 10 1000
r 10 10000
r 10 10000
r 10 100000
bt
p this
ls
r 2 20000
r 1 20000
dashboard -output /dev/pts/10 
r
r 1 2000
r 0 1000
r 1 2000
make
r 1 2000
make
r 1 2000
ls
q
r 20 100000
l
r
c
dashboard -output /dev/pts/15
c
l
ll
l
c
r 10 10000
r 10 100000
r 20 80000
r 20 80000
r 20 10000
p metadata
q
